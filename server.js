 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var bodyParser = require('body-parser');
var request = require('request');
var htmlparser = require("htmlparser2");
var async = require('async');
var mongodb = require('mongodb');

var mongoUrl = process.env.MONGOLAB_URI;
var API_KEY = process.env.PIXABAY_API_KEY;

var app = express();
var mongo = mongodb.MongoClient;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
  .get(function(req, res) {
	  res.sendFile(process.cwd() + '/views/index.html');
  });
    
app.post('/', function (req, res){
  res.redirect('/api/imagesearch/' + req.body.imageSearchQuery + '?offset=' + req.body.imageSearchPageOffset);
});

app.get('/api/imagesearch/:query', function(req,res){
  var page = req.query.offset;
  var query = req.params.query;
  mongo.connect(mongoUrl,function(error, db) {
    if (error) console.log(error);
    var collection = db.collection('imagequery');
    
    collection.insert({
      'term': query,
      'when': (new Date).toISOString()
    });
    
    // Delete first entry if count is greater than 10
    collection.count(function(error, count){
      if(count > 10){
        collection.deleteOne({},function(error, obj){
          console.log('deleted')
          db.close();
        });
      }
    });
  });
  
  // Verify that 'page' is a number
  if(!(/^[0-9]+$/.test(page))){
    page = '1';
  }
  
  // Character limit is 100
  if(query.length > 100){
    page = page.slice(0,100);
  }
  
  var queryString = query.split(' ').join('+');
  
  var url = 'https://pixabay.com/api/?key=' + API_KEY 
    + '&q=' + queryString + '&page=' + page + '&per_page=5'
    + '&safesearch=true';

  request(url, function(error, response, body){
    if(error) console.log(error);
    var json = JSON.parse(body);
    if(response.statusCode === 200){
      var output  = {
        images: []
      };
      var loopArray = json.hits;
      async.forEach(loopArray, function(item,next){
        request(item.pageURL, function(error,response,body){
          console.log('requesting... ')
          var altText = '';
          var parser = new htmlparser.Parser({
            onopentag: function(name, attribs){
              if(name === 'img' && attribs.itemprop === 'contentURL'){
                console.log(attribs.alt);
                
                altText = attribs.alt;
              }
            },
          }, {decodeEntities: true});
          parser.write(body);
          output.images.push({
            'page_url': item.pageURL,
            'image_url': item.webformatURL,
            'alt_text': altText,
          });
          parser.end();
          next();
        });
        
      },
      function(error){
        if (error) console.log(error);
        res.json(output);
      });
     
    }
    else{
      console.log('status code: ', response.statusCode);
    }
    
  });
  
});

app.get('/search-history',function(req,res){
  mongo.connect(mongoUrl,function(error, db) {
    if(error) console.log(error);
    var collection = db.collection('imagequery');
    collection.find(
      {
        
      },
      {
      '_id': 0
      }).toArray(
      function(error,result){
        if (error) console.log(error);
        res.json({
          'previous_searches':result
        });
      }
    );
  });
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

